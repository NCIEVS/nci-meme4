/*****************************************************************************
 *
 * Package:    com.lexical.meme.core
 * Object:     FactFilter.java
 * 
 * Author:     Brian Carlsen
 *
 *****************************************************************************/
package gov.nih.nlm.recipe;

import java.io.Serializable;
import java.util.HashMap;

/**
 * This class contains all of the information to describe
 * a filter for facts generated by matching or some other process;
 *
 * @author Brian A. Carlsen
 * @version 1.0
 *
 */
public class FactFilter implements Serializable {

  //
  // These fields are public to facilitate ease of use
  //
  public String type_1 = "";
  public boolean negation_1 = false;
  public String [] values_1 = new String[0];
  public String type_2 = "";
  public String [] values_2 = new String[0];
  public boolean negation_2 = false;

  /**
   * Constructor
   */
  public FactFilter () { 
  };

  /**
   * Constructor
   */
  public FactFilter ( String t1, String [] v1, boolean n1,
		      String t2, String [] v2, boolean n2) {
    type_1 = t1;
    type_2 = t2;
    values_1 = v1;
    values_2 = v2;
    negation_1 = n1;
    negation_2 = n2;
  };

  /**
   * Constructor for loading from XML
   */
  public FactFilter (HashMap hm) {
    type_1 = (String)hm.get("type_1");
    type_2 = (String)hm.get("type_2");
    // need to add code to parse through values
    values_1 = new String[0];
    values_2 = new String[0];
    negation_1 = Boolean.valueOf((String)hm.get("negation_1")).booleanValue();
    negation_2 = Boolean.valueOf((String)hm.get("negation_2")).booleanValue();
  };

  /**
   * Overrides toString()
   * @return string
   */
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append(type_1);
    sb.append((negation_1) ? " (negated)" : "");
    sb.append(" AND ");
    sb.append(type_2);
    sb.append((negation_2) ? " (negated)" : "");
    return sb.toString();   
  }

  /**
   * Long description
   * @return String
   */
  public String longDescription () {
    StringBuffer sb = new StringBuffer();
    sb.append ("Exclude facts where one side fits the criteria \"");
    if (values_1.length == 0) {
      sb.append((negation_1) ? "not " : "");
      sb.append(type_1);
    } else {
      sb.append(type_1);
      sb.append((negation_1) ? " not" : "");
      sb.append(" in (");
      for (int i=0; i< values_1.length-1; i++) {
	sb.append(values_1[i]);
	sb.append(", ");
      }
      if (values_1.length > 0) 
	sb.append(values_1[values_1.length-1]);
      sb.append(")");
    }

    sb.append("\" and the other side fits the criteria \"");
    if (values_2.length == 0) {
      sb.append((negation_2) ? "not " : "");
      sb.append(type_2);
    } else {
      sb.append(type_2);
      sb.append((negation_2) ? " not" : "");
      sb.append(" in (");
      for (int i=0; i< values_2.length-1; i++) {
	sb.append(values_2[i]);
	sb.append(", ");
      }
      if (values_2.length > 0) 
	sb.append(values_2[values_2.length-1]);
      sb.append(")");
    }
    sb.append("\"");
    return sb.toString();
  }

  /**
   * Overrides equals
   * @return boolean 
   */
  public boolean equals (Object obj) {
    System.out.println("FactFilter::equals("+obj+")");

    if (! (obj instanceof FactFilter))
      return false;
    
    return longDescription().equals( ((FactFilter)obj).longDescription());
  }

  /**
   * Write shell script code for this filter.
   */
  public String toShellScript (String merge_set) {
    StringBuffer body = new StringBuffer(500);
    body.append(
		"    -- ").append(toString()).append("\n");

    String arg_1 = "";
    if (values_1 != null && values_1.length>0) {
      arg_1 = "t1";
      body.append("    exec MEME_UTILITY.drop_it('table','t1');\n");
      body.append("    CREATE TABLE t1 (" + type_1 + " VARCHAR2(1000));\n");
      for (int i = 0; i < values_1.length; i++)
	body.append("    INSERT INTO t1 VALUES ('" +
		    values_1[i].substring(values_1[i].indexOf(' ')+1) + "');\n");
      body.append("\n");
    }

    String arg_2 = "";
    if (values_2 != null && values_2.length>0) {
      arg_2 = "t2";
      body.append("    exec MEME_UTILITY.drop_it('table','t2');\n");
      body.append("    CREATE TABLE t2 (" + type_2 + " VARCHAR2(1000));\n");
      for (int i = 0; i < values_2.length; i++)
	body.append("    INSERT INTO t2 VALUES ('" + 
		    values_2[i].substring(values_2[i].indexOf(' ')+1) + "');\n");
      body.append("\n");
    }

    body.append(
		"    exec MEME_SOURCE_PROCESSING.filter_facts ( -\n");
    body.append("       type_1 => '").append(type_1).append("', ");
    body.append("arg_1 => '").append(arg_1).append("', ");
    body.append("not_1 => '").append(negation_1 ? "Y" : "N").append("', -\n");
    body.append("       type_2 => '").append(type_2).append("',");
    body.append("arg_2 => '").append(arg_2).append("',");
    body.append("not_2 => '").append(negation_2 ? "Y" : "N").append("', -\n");
    body.append("       merge_set => '");
    body.append(merge_set);
    body.append(
	        "', " +
		"source => '$new_source', -\n" +
		"       authority => '$authority', work_id => $work_id );\n");
    return body.toString();
  }


}
