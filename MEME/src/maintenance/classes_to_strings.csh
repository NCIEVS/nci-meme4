#!/bin/csh -f
#
# File:   classes_to_strings.csh
# Author: Brian Carlsen
#
# Remarks:  This script takes a classes_atoms.src file
#           and produces a strings.src file from it
#           It assumes $LVG_HOME is set
#
# 09/08/2003 (4.2.0): Release to NLM
# 06/20/2003 (4.1.1): Use language field from classes_atoms.src
#                     instead of param
# 03/19/2003 (4.1.0): Ported to MEME4
#
# Version info
set release=4
set version="2.0"
set authority="BAC";
set date="06/20/2004";

#
# Set environment (if configured)
#
if ($?ENV_FILE == 1 && $?ENV_HOME == 1) then
    source $ENV_HOME/bin/env.csh
endif

#
# Change on release to NLM
#
setenv PATH "/bin:/usr/bin:/usr/local/bin"
set perl=$PATH_TO_PERL
set sed=sed
set awk=awk
set sort="sort -T ."
set join=join

if ($?LVG_HOME == 0) then
    echo "\$LVG_HOME must be set."
    exit 1
endif

if ($#argv > 0) then
    if ("-version" == $argv[1]) then
	echo "Release ${release}: version $version, $date ($authority)"
	exit 0
    else if ("$argv[1]" == "-v") then
	echo "$version"
	exit 0
    else if ("$argv[1]" == "--help" || "$argv[1]" == "-help") then
    cat <<EOF
 This script has the following usage:
   Usage: $0 <directory> <language>

    This script takes a directory containing a
    classes_atoms.src file and produces a strings.src 
    file from it.

EOF
    exit 0
    endif
endif

if ($#argv != 2) then
    echo "Usage: $0 <directory> <language>"
    exit 1
endif

set dir=$1
if (!(-d $dir)) then
    echo "$dir is not a directory."
    exit 1
endif

set lang=$21
set file=$dir/classes_atoms.src
if (!(-e $file)) then
    echo "$file does not exist."
    exit 1
endif
echo "--------------------------------------------------------------"
echo "Starting `/bin/date`"
echo "--------------------------------------------------------------"
echo "LVG_HOME:        $LVG_HOME"
echo "language:   $lang (ignored, value taken from file)"
echo "file:       $file"
echo "dir:        $dir"

#
# Convert to 
#    id|string|norm_string
# into
#    string_pre|string|norm_string_pre|norm_string|lc_pre|language

#
# id|string|language  (id field used to keep track of which norm string matches)
#
echo "    Extracting unique string, language ...`/bin/date`"
$awk -F\| '{print $8"|"$13}' $file | $sort -u |\
 $awk -F\| '{print i++"|"$0}'  >! $dir/$$.sort

#
# The norm string for english strings is generated by running the
# string through luiNorm.  For foreign (non ENG) strings, luiNorm is
# useless so we duplicate the string into the norm string field.
# string|language|norm_string (same as string)
#
echo "    Normalize strings ... `/bin/date`"
$awk -F\| '$3 != "ENG" {print $2"|"$3"|"$2}' $dir/$$.sort >! $dir/$$.norm

#
# Norm the strings but preserve the id number
# id|string|language|norm_string
# 
$awk -F\| '$3 == "ENG" {print $0}' $dir/$$.sort |\
   $LVG_HOME/bin/luiNorm -t:2 -n | $sed 's/-No Output-//' >! $dir/$$.norm.tmp
$sort -u -o $dir/$$.norm.tmp{,}

#
# Sort the files on string_id and join
# string|language|norm_string
$sort -t\| -k 1,1 -o $dir/$$.sort{,}
$sort -t\| -k 1,1 -o $dir/$$.norm.tmp{,}
$join -t\| -j 1 -j2 1 -o 1.2 2.3 2.4 \
   $dir/$$.sort $dir/$$.norm.tmp >> $dir/$$.norm
/bin/rm -f $dir/$$.norm.tmp

#
# Use perl to make the strings.src format
# strings.src format
#
echo "    Generating strings.src format ...`/bin/date`"
cat $dir/$$.norm | $perl -e 'unshift @INC,"$ENV{ENV_HOME}/bin"; require "env.pl"; \
  while(<>) {  chop; ($s,$lang,$ns)=split /\|/; $_=substr($s,0,10)."|$s|".substr($ns,0,10)."|$ns|".lc(substr($s,0,10))."|$lang\n";  print;}'  >! $dir/strings.src

# Cleanup
\rm -f $dir/$$.{sort,norm}

echo "--------------------------------------------------------------"
echo "Finished `/bin/date`"
echo "--------------------------------------------------------------"
